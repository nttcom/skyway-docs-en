[
  {
    "name": "Peer",
    "type": "CLASS",
    "snippet": "Peer peer = new Peer(getApplicationContext(),peerId,options);<br>Peer peer = new Peer(getApplicationContext(),options);",
    "description": "A peer can connect to other peers and listen for connections.",
    "children": [
      {
        "name": "peerId",
        "optional": true,
        "type": "String",
        "description": "Other peers can connect to this peer using the provided ID. If no ID is given, one will be generated by the brokering server.<span class='warn'>It's not recommended that you use this ID to identify peers, as it's meant to be used for brokering connections only. You're recommended to set the<a href='#connectoption-metadata'><code>metadata</code></a> option to send other identifying information.</span>"
      },
      {
        "name": "options",
        "optional": false,
        "type": "<a href='#peeroption'>PeerOption</a>",
        "description": "The options object. "
      },
      {
        "name": "connect",
        "type": "METHOD",
        "snippet": "DataConnection dataConnection = peer.connect(peerId);<br>DataConnection dataConnection = peer.connect(peerId,options);",
        "description": "Connects to the remote peer specified by <code>id</code> and returns a DataConnection. Be sure to listen on the <a href='#peer-on-event-error'><code>error</code></a> event in case the connection fails.",
        "children": [
          {
            "name": "peerId",
            "type": "String",
            "description": "The brokering ID of the remote peer (their<a href='#peer-identity'><code>identity</code></a>)"
          },
          {
            "name": "options",
            "optional": true,
            "type": "<a href='#connectoption'>ConnectOption</a>",
            "description": "The options object."
          }
        ]
      },
      {
        "name": "call",
        "type": "METHOD",
        "snippet": "MediaConnection mediaConnection = peer.call(peerId,stream);<br>MediaConnection mediaConnection = peer.call(peerId,stream,option);",
        "description": "Calls the remote peer specified by <code>id</code> and returns a MediaConnection.Be sure to listen on the <a href='#peer-on-event-error'><code>error</code></a> event in case the connection fails.",
        "children": [
          {
            "name": "peerId",
            "type": "String",
            "description": "The brokering ID of the remote peer (their<a href='#peer-identity'><code>identity</code></a>)"
          },
          {
            "name": "stream",
            "type": "<a href='#mediastream'>MediaStream</a>",
            "description": "The caller's media stream"
          },
          {
            "name": "option",
            "optional": true,
            "type": "<a href='#calloption'>CallOption</a>",
            "description": "The options object."
          }
        ]
      },

      {
        "name": "on",
        "type": "METHOD",
        "snippet": "peer.on(event,callback);",
        "description": "Set listeners for PeerEvent.",
        "children": [
          {
            "name": "event",
            "type": "PeerEventEnum",
            "description": "Specifies the event type.",
            "children": [
              {
                "name": "OPEN",
                "snippet": "peer.on(Peer.PeerEventEnum.OPEN,new OnCallback(){public void onCallback(Object ownId){...}});",
                "description": "Emitted when a connection to the PeerServer is established. You may use the peer before this is emitted, but messages to the server will be queued.<code>ownId</code> is the brokering ID of the peer (which was either provided in the Peer constructor or assigned by the server).<span class='tip'>You should not wait for this event before connecting to other peers if connection speed is important.</span> "
              },
              {
                "name": "CONNECTION",
                "snippet": "peer.on(Peer.PeerEventEnum.CONNECTION,new OnCallback(){public void onCallback(Object object){...}});",
                "description": "Emitted when a new data connection is established from a remote peer. The callback function parameter is a DataConnection object."
              },
              {
                "name": "CALL",
                "snippet": "peer.on(Peer.PeerEventEnum.CALL,new OnCallback(){public void onCallback(Object object){...}});",
                "description": "Emitted when a remote peer attempts to call you. The callback function parameter is a MediaConnection object. <code>mediaConnection</code> is not yet active; you must first answer the call (<a href='#mediaconnection-answer'><code>mediaConnection.answer(stream);</code></a>). Then, you can listen for the stream event."
              },
              {
                "name": "CLOSE",
                "snippet": "peer.on(Peer.PeerEventEnum.CLOSE,new OnCallback(){public void onCallback(Object object){...}});",
                "description": "Emitted when the peer is<a href='#peer-isdestroyed'>destroyed</a> and can no longer accept or create any new connections. At this time, the peer's connections will all be closed.<span class='tip'>To be extra certain that peers clean up correctly, we recommend calling peer.destroy() on a peer when it is no longer needed.</span>"
              },
              {
                "name": "DISCONNECTED",
                "snippet": "peer.on(Peer.PeerEventEnum.DISCONNECTED,new OnCallback(){public void onCallback(Object object){...}});",
                "description": "Emitted when the peer is<a href='#peer-isdisconnected'>disconnected</a> from the signalling server."
              },
              {
                "name": "ERROR",
                "snippet": "peer.on(Peer.PeerEventEnum.ERROR,new OnCallback(){public void onCallback(Object object){...}});",
                "description": "The callback function parameter is a <a href='#peererror'>PeerError</a> object. Errors on the peer are almost always fatal and will destroy the peer. Errors from the underlying socket and PeerConnections are forwarded here."
              }
            ]
          },
          {
            "name": "callback",
            "description": "Specifies the callback function to call when the event is triggered."
          }
        ]
      },

      {
        "name": "disconnect",
        "type": "METHOD",
        "snippet": "peer.disconnect();",
        "description": "Close the connection to the server, leaving all existing data and media connections intact.<a href='#peer-isdisconnected'><code>disconnected</code></a>will be set to <code>true</code>.<span class='warn'>This cannot be undone; the respective peer object will no longer be able to create or receive any connections and its ID will be forfeited on the (cloud) server.</span>"
      },
      {
        "name": "destroy",
        "type": "METHOD",
        "snippet": "peer.destroy();",
        "description": "Close the connection to the server and terminate all existing connections.<a href='#peer-isdestroyed'><code>destroyed</code></a> will be set to <code>true</code>.<span class='warn'>This cannot be undone; the respective peer object will no longer be able to create or receive any connections and its ID will be forfeited on the (cloud) server. Also closes all data and media connections.</span>"
      },

      {
        "name": "listAllPeers",
        "type": "METHOD",
        "snippet": "peer.listAllPeers(new OnCallback(){public void onCallback(Object object){...}});",
        "description": "Get an JSONArray of PeerIDs of users connected with the same API key."
      },

      {
        "name": "identity",
        "type": "String",
        "description": "The brokering ID of this peer. If no ID was specified in<a href='#peer'>Peer class</a>, this will be <code>undefined</code> until the<a href='#peer-on-event-open'><code>open</code></a> event is emitted."
      },

      {
        "name": "connections",
        "type": "Map",
        "description": "A hash of all connections associated with this peer, keyed by the remote peer's ID.<span class='tip'>We recommend keeping track of connections yourself rather than relying on this hash.</span>"
      },

      {
        "name": "isDisconnected",
        "type": "Boolean",
        "description": "<code>false</code> if there is an active connection to the PeerServer."
      },

      {
        "name": "isDestroyed",
        "type": "Boolean",
        "description": "<code>true</code> if this peer and all of its connections can no longer be used."
      }
    ]
  },

  {
    "name": "PeerOption",
    "type": "CLASS",
    "snippet": "PeerOption options = new PeerOption();",
    "description": "Specify connection settings.",
    "children": [
      {
        "name": "key",
        "type": "String",
        "description": "API key for the cloud PeerServer."
      },
      {
        "name": "domain",
        "type": "String",
        "description": "The domain registered with the API key on the SkyWay developer's dashboard."
      },
      {
        "name": "host",
        "optional": true,
        "type": "String",
        "description": "Server host. Defaults to <code>skyway.io</code>."

      },
      {
        "name": "port",
        "optional": true,
        "type": "int",
        "description": "Server port. Defaults to <code>443</code>."

      },
      {
        "name": "path",
        "optional": true,
        "type": "String",
        "description": "The path where your self-hosted PeerServer is running. Defaults to <code>'/'</code>."
      },
      {
        "name": "secure",
        "optional": true,
        "type": "Boolean",
        "description": "<code>true</code> if you're using SSL. Defaults to <code>true</code> since skyway.io uses SSL."
      },
      {
        "name": "turn",
        "optional": true,
        "type": "Boolean",
        "description": "<code>true</code> if you're using SkyWay's TURN server. Defaults to <code>false</code>. You must apply <a href='https://skyway.io/ds/turnrequest' target='_blank'>here</a> to use this feature."
      },
      {
        "name": "config",
        "optional": true,
        "type": "ArrayList <IceConfig>",
        "description": "Configuration <a href='#iceconfig'><code>IceConfig</code></a> Array. .Defaults to { 'iceServers': [{ 'url': 'stun:stun.skyway.io:3478' }] }. It is not necessary to set iceServers if you're using SkyWay's TURN server."
      },
      {
        "name": "debug",
        "optional": true,
        "type": "DebugLevelEnum",
        "description": "Prints log messages depending on the debug level passed in. Defaults to <code>DEBUG_LEVEL_NO_LOGS</code>.",
        "children": [
          {
            "name": "NO_LOGS",
            "description": "Prints no logs."
          },
          {
            "name": "ONLY_ERROR",
            "description": "Prints only errors."
          },
          {
            "name": "ERROR_AND_WARNING",
            "description": "Prints errors and warnings."
          },
          {
            "name": "ALL_LOGS",
            "description": "Prints all logs."
          }
        ]
      }
    ]
  },

  {
    "name": "IceConfig",
    "snippet": "IceConfig config = new IceConfig();",
    "type": "CLASS",
    "description": "Specify STUN/TURN server settings.",
    "children":[
      {
        "name": "url",
        "type": "String",
        "description": "The STUN/TURN server url."
      },
      {
        "name": "username",
        "optional": true,
        "type": "String",
        "description": "Use when a user name is required."
      },
      {
        "name": "credential",
        "optional": true,
        "type": "String",
        "description": "Use when a password is required."
      }
    ]
  },
  {
    "name": "ConnectOption",
    "type": "CLASS",
    "snippet": "ConnectOption option = new ConnectOption();",
    "description": "Specify options for connecting to peers.",
    "children": [
      {
        "name": "label",
        "type": "String",
        "description": "A unique label by which you want to identify this data connection. If left unspecified, a label will be generated at random. Can be accessed with dataConnection.<a href='#connection-label'><code>label</code></a>"
      },
      {
        "name": "metadata",
        "type": "String",
        "description": "Metadata associated with the connection, passed in by whoever initiated the connection. Can be accessed withdataConnection.<a href='#dataconnection-metadata'><code>metadata</code></a>"
      },
      {
        "name": "serialization",
        "type": "DataConnection.SerializationEnum",
        "description": "The data serialization format. Default is BINARY. This value changes what type of data can be sent using dataConnection.<a href='#dataconnection-send'><code>send</code></a>. The value can be obtained from dataConnection.<a href='#dataconnection-serialization'><code>serialization</code></a>.",
        "children": [
          {
            "name": "BINARY",
            "description": "Set serialization type:<code>binary</code>"
          },
          {
            "name": "BINARY_UTF8",
            "description": "Set serialization type:<code>binary-utf8</code>"
          },
          {
            "name": "JSON",
            "description": "Set serialization type:<code>json</code>"
          },
          {
            "name": "NONE",
            "description": "Set serialization type:<code>none</code>"
          }
        ]
      },
      {
        "name": "reliable",
        "type": "Boolean",
        "description": "Whether the underlying data channels should be reliable (e.g. for large file transfers) or not (e.g. for gaming or streaming). Defaults to <code>false</code>"
      }
    ]
  },
  {
    "name": "CallOption",
    "type": "CLASS",
    "snippet": "CallOption option = new CallOption();",
    "description": "Specify options for calling peers.",
    "children": [
      {
        "name": "metadata",
        "type": "String",
        "description": "Any type of metadata associated with the connection, passed in by whoever initiated the connection."
      }
    ]
  },
  {
    "name": "PeerError",
    "type": "CLASS",
    "description": "Obtained when an ”error” event occurs. If the OS gives error info, it can be found in the error property.",
    "children": [
      {
        "name": "type",
        "type": "PeerErrorEnum",
        "description": "Enumerated error types.",
        "children": [
          {
            "name": "NO_ERROR",
            "type": "Error",
            "tags": ["fatal"],
            "description": "No error has occurred."
          },
          {
            "name": "BROWSER_INCOMPATIBLE",
            "type": "Error",
            "tags": ["fatal"],
            "description": "The client does not support some or all WebRTC features that you are trying to use."
          },
          {
            "name": "INVALID_ID",
            "type": "Error",
            "tags": ["fatal"],
            "description": "The ID passed into the Peer constructor contains illegal characters."
          },
          {
            "name": "INVALID_KEY",
            "type": "Error",
            "tags": ["fatal"],
            "description": "The API key passed into the Peer constructor contains illegal characters or is not in the system (cloud server only)."
          },
          {
            "name": "UNAVAILABLE_ID",
            "type": "Error",
            "tags": ["fatal"],
            "description": "The ID passed into the Peer constructor is already taken."
          },
          {
            "name": "SSL_UNAVAILABLE",
            "type": "Error",
            "tags": ["fatal"],
            "description": "The server does not support SSL."
          },
          {
            "name": "DISCONNECTED",
            "type": "Error",
            "description": "You've already disconnected this peer and can no longer make any new connections on it."
          },
          {
            "name": "SERVER_ERROR",
            "type": "Error",
            "tags": ["fatal"],
            "description": "Unable to reach the server."
          },
          {
            "name": "SOCKET_ERROR",
            "type": "Error",
            "tags": ["fatal"],
            "description": "An error from the underlying socket."
          },
          {
            "name": "SOCKET_CLOSED",
            "type": "Error",
            "tags": ["fatal"],
            "description": "The underlying socket closed unexpectedly."
          },
          {
            "name": "NETWORK",
            "type": "Error",
            "tags": ["fatal"],
            "description": "Network error between signalling server."
          },
          {
            "name": "PEER_UNAVAILABLE",
            "type": "Error",
            "tags": ["fatal"],
            "description": "The Peer is unavailable"
          },
          {
            "name": "WEBRTC",
            "type": "Error",
            "tags": ["fatal"],
            "description": "Error about WebRTC."
          }
        ]
      },
      {
        "name": "message",
        "type": "String",
        "description": "error message"
      },
      {
        "name": "exception",
        "type": "Exception",
        "description": "Error information object from OS."
      }
    ]
  },
  {
    "name": "DataConnection",
    "type": "CLASS",
    "description": "Wraps WebRTC's DataChannel. To get one, use Peer <a href='#peer-connect'><code>connect</code></a> or listen for the <a href='#peer-on-event-peer_event_connection'><code>CONNECTION</code></a> event.",
    "children": [
      {
        "name": "send",
        "type": "METHOD",
        "snippet": "BOOL bResult = dataConnection.send(data);",
        "description": "Sends data to the remote peer. The processing method changes depending on the <a href='#dataconnection-serialization'><code>serialization</code></a> property. Depending on the value of serialization, the data that can be sent between each of the platforms (JavaScript, iOS, and Android) changes. See <a href=https://github.com/nttcom/skyway-docs-en/blob/master/serialization.md' target='_blank'>this chart</a> for details.",
        "children": {
          "name": "data",
          "description": "The data to send."
          }
      },
      {
        "name": "close",
        "type": "METHOD",
        "snippet": "dataConnection.close();",
        "description": "Closes the data connection gracefully, cleaning up underlying DataChannels and PeerConnections."
      },
      {
        "name": "on",
        "type": "METHOD",
        "snippet": "dataConnection.on(event,new OnCallback(){public void onCallback(Object object){}});",
        "description": "Set event callback for DataConnection.",
        "children": [
          {
            "name": "event",
            "type": "DataEventEnum",
            "description": "Data connection event types.",
            "children": [
              {
                "name": "DATA",
                "description": "Emitted when data is received from the remote peer."
              },
              {
                "name": "OPEN",
                "description": "Emitted when the connection is established and ready-to-use."
              },
              {
                "name": "CLOSE",
                "description": "Emitted when either you or the remote peer closes the data connection."
              },
              {
                "name": "ERROR",
                "description": "The callback function parameter is a <a href='#peererror'>PeerError</a> object."
              }
            ]
            },
            {
            "name": "callback",
            "description": "Specifies the callback function to call when the event is triggered."
            }
          ]
        },
        {
          "name": "bufferSize",
          "type": "int",
          "description": "The number of messages queued to be sent once the browser buffer is no longer full."
          },
          {
          "name": "dataChannel",
          "type": "<a href='#datachannel'>DataChannel</a>",
          "description": "A reference to the DataChannel object associated with the connection."
          },
          {
            "name": "label",
            "type": "String",
            "description": "A unique label by which you want to identify this data connection. If left unspecified, a label will be generated at random."
          },
          {
            "name": "metadata",
            "type": "String",
            "description": "Any type of metadata associated with the connection, passed in by whoever initiated the connection."
          },
          {
            "name": "isOpen",
            "type": "BOOL",
            "description": "Is <code>true</code> if the connection is open and ready for reading and writing."
          },
          {
            "name": "peerConnection",
            "type": "PeerConnection",
            "description": "The PeerConnection object tied to the connection."
          },
          {
            "name": "peer",
            "type": "String",
            "description": "The ID of the peer on the other end of this connection."
          },
          {
            "name": "reliable",
            "type": "boolean",
            "description": "Whether the underlying data channels should be reliable. Is set when the connection is opened."
          },
          {
            "name": "serialization",
            "type": "SerializationEnum",
            "description": "The serialization format to use when sending data. Is set when the connection is opened.",
            "children": [
              {
                "name": "BINARY",
                "description": "<code>binary</code>"
              },
              {
                "name": "BINARY_UTF8",
                "description": "<code>binary-utf8</code>"
              },
              {
                "name": "JSON",
                "description": "<code>json</code>"
              },
              {
                "name": "NONE",
                "description": "<code>none</code>"
              }
            ]
          },
        {
        "name": "type",
        "type": "String",
        "description": "For data connections, this is always <code>'data'</code>."
        }
      ]
    },
  {
    "name": "MediaConnection",
    "type": "CLASS",
    "description": "Wraps WebRTC's media streams. Obtained from Peer.<a href='#peer-call'><code>call</code></a> or the <a href='#peer-on-event-call'><code>CALL</code></a> event.",
    "children": [
      {
        "name": "answer",
        "type": "METHOD",
        "snippet": "mediaConnection.answer();<br>mediaConnection.answer(stream);",
        "description": "Answer media connections obtained from a <a href='#peer-on-event-peer_event_call'><code>call</code></a> event. You can set your own media stream as the parameter.",
        "children": {
          "name": "stream",
          "optional": true,
          "type": "<a href='#mediastream'>MediaStream</a>",
          "description": "<a href='#mediastream'><code>MediaStream</code></a> obtained from Navigator.getUserMedia."
        }
      },
      {
        "name": "close",
        "type": "METHOD",
        "snippet": "media.close();",
        "description": "Closes the media connection."
      },
      {
        "name": "on",
        "type": "METHOD",
        "snippet": "media.on(event, new OnCallback(){puclic void onCallback(Object object){}});",
        "description": "Set listeners for MediaEventEnum event.",
        "children": [
          {
            "name": "event",
            "type": "MediaEventEnum",
            "description": "MediaConnection event types.",
            "children": [
              {
                "name": "STREAM",
                "description": "Emitted when a remote peer adds a <code>stream</code>."
              },
              {
                "name": "CLOSE",
                "description": "Emitted when either you or the remote peer closes the media connection."
              },
              {
                "name": "ERROR",
                "description": "The class of callback arguments is<a href='#peererror'>PeerError</a>."
              }
            ]
          },
          {
            "name": "callback",
            "description": "Specifies the callback function to call when the event is triggered."
          }
        ]
      },
      {
        "name": "isOpen",
        "type": "BOOL",
        "description": "Is <code>true</code> if the connection is open and ready for reading and writing."
      },
      {
        "name": "metadata",
        "type": "String",
        "description": "Any type of metadata associated with the connection, passed in by whoever initiated the connection."
      },
      {
        "name": "peer",
        "type": "String",
        "description": "The ID of the peer on the other end of this connection."
      },
      {
        "name": "type",
        "type": "String",
        "description": "For media connections, this is always <code>'media'</code>."
      }
    ]
  },
  {
    "name": "MediaStream",
    "type": "CLASS",
    "children": [
      {
        "name": "close",
        "type": "METHOD",
        "snippet": "stream.close();",
        "description": "close MediaStream."
      },
      {
        "name": "getVideoTracks",
        "type": "METHOD",
        "snippet": "int videos = stream.getVideoTracks();",
        "description": "Gets the number of VideoTracks added to the MediaStream."
      },
      {
        "name": "setEnableVideoTrack",
        "type": "METHOD",
        "snippet": "stream.setEnableVideoTrack(pos,enable);",
        "description": "Sets the play state of VideoTracks in a MediaStream.",
        "children": [
          {
            "name": "pos",
            "type": "int",
            "description": "The index of the VideoTrack. VideoTrack indexes are 0 or greater."
          },
          {
            "name": "enable",
            "type": "Boolean",
            "description": "Play if <code>true</code>, stop <code>false</code>."
          }
        ]
      },
      {
        "name": "getEnableVideoTrack",
        "type": "METHOD",
        "snippet": "Boolean enable = stream.getEnableVideoTrack(pos);",
        "description": "Gets the play state of the VideoTrack.",
        "children": [
          {
            "name": "pos",
            "type": "int",
            "description": "The index of the VideoTrack. VideoTrack indexes are 0 or greater."
          }
        ]
      },
      {
        "name": "getAudioTracks",
        "type": "METHOD",
        "snippet": "int audios = stream.getAudioTracks();",
        "description": "The number of Audio tracks added to media stream."
      },
      {
        "name": "setEnableAudioTrack",
        "type": "METHOD",
        "snippet": "stream.setEnableAudioTrack(pos,enable);",
        "description": "Set the play state of audio track added to media stream.",
        "children": [
          {
            "name": "pos",
            "type": "int",
            "description": "The index of the AudioTrack. AudioTrack indexes are 0 or greater."
          },
          {
            "name": "enable",
            "type": "Boolean",
            "description": "Play if <code>true</code>, stop <code>false</code>."
          }
        ]
      },
      {
        "name": "getEnableAudioTrack",
        "type": "METHOD",
        "snippet": "Boolean enable = stream.getEnableAudioTrack(pos);",
        "description": "Get audio track play state.",
        "children": [
          {
            "name": "pos",
            "type": "int",
            "description": "The index of the AudioTrack. AudioTrack indexes are 0 or greater."
          }
        ]
      }
    ]
  },
  {
    "name": "Canvas",
    "type": "OBJECT",
    "snippet": "Canvas canvas = (Canvas) findViewById(R.id.ownvideo);",
    "description": "The object to display the video.",
    "children": [
      {
        "name": "addSrc",
        "type": "METHOD",
        "snippet": "canvas.addSrc(stream,trackNo);",
        "description": "Add mediastream and Track No, as a media source to the canvas.",
        "children": [
          {
            "name": "stream",
            "type": "<a href='#mediastream'>MediaStream</a>",
            "description": "mediastream to add."
          },
          {
            "name": "trackNo",
            "type": "int",
            "description": "The index of the VideoTrack. VideoTrack indexes are 0 or greater."
          }
        ]
      },
      {
        "name": "removeSrc",
        "type": "METHOD",
        "snippet": "canvas.removeSrc(stream,trackNo);",
        "description": "Remove mediastream and Track No, as a media source from the canvas.",
        "children": [
          {
            "name": "stream",
            "type": "<a href='#mediastream'>MediaStream</a>",
            "description": "mediastream to remove."
          },
          {
            "name": "trackNo",
            "type": "int",
            "description": "The index of the VideoTrack. VideoTrack indexes are 0 or greater."
          }
        ]
      }
    ]
  },
  {
    "name": "Navigator",
    "type": "CLASS",
    "description": "Class to get Video.",
    "children": [
      {
        "name": "initialize",
        "type": "METHOD",
        "snippet": "Navigator.initialize(peer);",
        "description": "Initialize Navigator",
        "children": [
          {
            "name": "peer",
            "type": "<a href='#peer'>Peer</a>",
            "description": "Initialized Peer object"
          }
        ]
      },
      {
        "name": "terminate",
        "type": "METHOD",
        "snippet": "Navigator.terminate();",
        "description": "Terminate navigator"
      },
      {
        "name": "getUserMedia",
        "type": "METHOD",
        "snippet": "MediaStream stream = Navigator.getUserMedia(constraints);",
        "description": "Get Local Media Stream.",
        "children": [
          {
            "name": "constraints",
            "type": "<a href='#mediaconstraints'>MediaConstraints</a>",
            "description": "Media Stream setting"
          }
        ]
      }
    ]
  },

  {
    "name": "MediaConstraints",
    "type": "CLASS",
    "description": "Options for the <a href='#navigator'>Navigator</a>.getUserMedia function.",
    "children": [
      {
        "name": "videoFlag",
        "type": "Boolean",
        "description": "Set the video. <code>true</code> enable the video, <code>false</code> disable the video. Defaults to <code>true</code>."
      },
      {
        "name": "audioFlag",
        "type": "Boolean",
        "description": "Set the audio. <code>true</code> enable the audio, <code>false</code> disable the audio. Defaults to <code>true</code>."
      },
      {
        "name": "cameraPosition",
        "type": "CameraPositionEnum",
        "description": "Set camera. Defaults to FRONT.",
        "children": [
          {
            "name": "UNSPECIFIED",
            "description": "Use camera found first.The order depends on system."
          },
          {
            "name": "BACK",
            "description": "Use camera outside. If it's not found, use camera found first."
          },
          {
            "name": "FRONT",
            "description": "Use camera inside. If it's not found, use camera found first."
          }
        ]
      },
      {
        "name": "maxWidth",
        "type": "int",
        "description": "Set the width pixel maximum limit. If you set <code>0</code>, it depends on WebRTC engine. Defaults to <code>640</code>."
      },
      {
        "name": "minWidth",
        "type": "int",
        "description": "Set the width pixel minimum limit. If you set <code>0</code>, it depends on WebRTC engine. Defaults to <code>0</code>."
      },
      {
        "name": "maxHeight",
        "type": "int",
        "description": "Set the height pixel maximum limit. If you set <code>0</code>, it depends on WebRTC engine. Defaults to <code>640</code>."
      },
      {
        "name": "minHeight",
        "type": "int",
        "description": "Set the height pixel minimum limit. If you set <code>0</code>, it depends on WebRTC engine. Defaults to <code>0</code>."
      },
      {
        "name": "maxFrameRate",
        "type": "int",
        "description": "Set the frame rate maximum limit. If you set <code>0</code>, it depends on WebRTC engine. Defaults to <code>10</code>."
      },
      {
        "name": "minFrameRate",
        "type": "int",
        "description": "Set the frame rate minimum limit. If you set <code>0</code>, it depends on WebRTC engine. Defaults to <code>0</code>."
      }
    ]
  }
]
