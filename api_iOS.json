[
  {
    "name": "SKWPeer",
    "type": "CLASS",
    "snippet": "SKWPeer* peer = [[SKWPeer alloc] initWithId:peerId options:options];<br>SKWPeer* peer = [[SKWPeer alloc] initWithOptions:options];",
    "description": "A peer can connect to other peers and listen for connections.",
    "children": [
      {
        "name": "peerId",
        "optional": true,
        "type": "NSString",
        "description": "Other peers can connect to this peer using the provided ID. If no ID is given, one will be generated by the brokering server.<span class='warn'>It's not recommended that you use this ID to identify peers, as it's meant to be used for brokering connections only. You're recommended to set the<a href='#skwconnectoption-metadata'><code>metadata</code></a> option to send other identifying information.</span>"
      },
      {
        "name": "options",
        "optional": false,
        "type": "<a href='#skwpeeroption'>SKWPeerOption</a>",
        "description": "The options object."
      },
      {
        "name": "connectWithId",
        "type": "METHOD",
        "snippet": "SKWDataConnection* dataConnection = [peer connectWithId:peerId];<br>SKWDataConnection* dataConnection = [peer connectWithId:peerId options:options];",
        "description": "Connects to the remote peer specified by <code>id</code> and returns a SKWDataConnection. Be sure to listen on the <a href='#skwpeer-on-event-skw_peer_event_error'><code>error</code></a> event in case the connection fails.",
        "children": [
          {
            "name": "peerId",
            "type": "NSString",
            "description": "The brokering ID of the remote peer (their <a href='#skwpeer-identity'><code>identity</code></a>)"
          },
          {
            "name": "options",
            "optional": true,
            "type": "<a href='#skwconnectoption'>SKWConnectOption</a>",
            "description": "The options object."
          }
        ]
      },
      {
        "name": "callWithId",
        "snippet": "SKWMediaConnection* mediaConnection = [peer callWithId:peerId stream:stream];<br>SKWMediaConnection* mediaConnection = [peer callWithId:peerId stream:stream options:options];",
        "description": "Calls the remote peer specified by <code>id</code>で and returns a SKWMediaConnection.Be sure to listen on the <a href='#skwpeer-on-event-skw_peer_event_error'><code>error</code></a> event in case the connection fails.",
        "children": [
          {
            "name": "peerId",
            "type": "NSString",
            "description": "The brokering ID of the remote peer (their<a href='#skwpeer-identity'><code>identity</code></a>)."
          },
          {
            "name": "stream",
            "type": "<a href='#skwmediastream'>SKWMediaStream</a>",
            "description": "The caller's media stream"
          },
          {
            "name": "options",
            "optional": true,
            "type": "<a href='#skwcalloption'>SKWCallOption</a>",
            "description": "The options object."
          }
        ]
      },
      {
        "name": "on",
        "type": "METHOD",
        "snippet": "[peer on:event callback:^(NSObject* obj)callback];",
        "description": "Set listeners for SKWPeerEvent.",
        "children": [
          {
            "name": "event",
            "type": "SKWPeerEventEnum",
            "description": "Specifies the event type.",
            "children": [
              {
                "name": "SKW_PEER_EVENT_OPEN",
                "snippet": "[peer on:SKW_PEER_EVENT_OPEN callback:^(NSObject* ownId){ ... }];",
                "description": "Emitted when a connection to the PeerServer is established. You may use the peer before this is emitted, but messages to the server will be queued.<code>ownId</code> is the brokering ID of the peer (which was either provided in the SKWPeer constructor or assigned by the server).<span class='tip'>You should not wait for this event before connecting to other peers if connection speed is important.</span> "
              },
              {
                "name": "SKW_PEER_EVENT_CONNECTION",
                "snippet": "[peer on:SKW_PEER_EVENT_CONNECTION callback:^(NSObject* dataConnection){ ... }];",
                "description": "Emitted when a new data connection is established from a remote peer. The callback function parameter is an SKWDataConnection object."
              },
              {
                "name": "SKW_PEER_EVENT_CALL",
                "snippet": "[peer on:SKW_PEER_EVENT_CALL callback:^(NSObject* mediaConnection){ ... }];",
                "description": "Emitted when a remote peer attempts to call you. The callback function parameter is an SKWMediaConnection object. <code>mediaConnection</code> is not yet active; you must first answer the call（<a href='#skwmediaconnection-answer'><code>[mediaConnection answer:stream];</code></a>). Then, you can listen for the stream event."
              },
              {
                "name": "SKW_PEER_EVENT_CLOSE",
                "snippet": "[peer on:SKW_PEER_EVENT_CLOSE callback:^(NSObject* obj){ ... }];",
                "description": "Emitted when the peer is<a href='#skwpeer-isdestroyed'>destroyed</a> and can no longer accept or create any new connections. At this time, the peer's connections will all be closed.<span class='tip'>To be extra certain that peers clean up correctly, we recommend calling peer.destroy() on a peer when it is no longer needed.</span>"
              },
              {
                "name": "SKW_PEER_EVENT_DISCONNECTED",
                "snippet": "[peer on:SKW_PEER_EVENT_DISCONNECTED callback:^(NSObject* obj){ ... }];",
                "description": "Emitted when the peer is<a href='#skwpeer-isdisconnected'>disconnected</a> from the signalling server."
              },
              {
                "name": "SKW_PEER_EVENT_ERROR",
                "snippet": "[peer on:SKW_PEER_EVENT_ERROR callback:^(NSObject* obj){ ... }];",
                "description": "The callback function parameter is an <a href='#skwpeererror'>SKWPeerError</a> object. Errors on the peer are almost always fatal and will destroy the peer. Errors from the underlying socket and PeerConnections are forwarded here."
              }
            ]
          },
          {
            "name": "callback",
            "description": "Specifies the Block to call when the event is triggered."
          }
        ]
      },
      {
        "name": "disconnect",
        "type": "METHOD",
        "snippet": "[peer disconnect];",
        "description": "Close the connection to the server, leaving all existing data and media connections intact.<a href='#skwpeer-isdisconnected'><code>disconnected</code></a>will be set to <code>true</code>.<span class='warn'>This cannot be undone; the respective peer object will no longer be able to create or receive any connections and its ID will be forfeited on the (cloud) server.</span>"
      },

      {
        "name": "reconnect",
        "type": "METHOD",
        "snippet": "[peer reconnect];",
        "description": "Reconnects to the signaling server. Connects using the same peerID. Only succeeds if disconnected using <a href='#skwpeer-disconnect'><code>disconnect</code></a>. Will not work if disconnected using <a href='#skwpeer-destroy'><code>destroy</code></a>."
      },

      {
        "name": "destroy",
        "type": "METHOD",
        "snippet": "[peer destroy];",
        "description": "Close the connection to the server and terminate all existing connections.<a href='#skwpeer-isdestroyed'><code>destroyed</code></a> will be set to <code>true</code>.<span class='warn'>This cannot be undone; the respective peer object will no longer be able to create or receive any connections and its ID will be forfeited on the (cloud) server. Also closes all MediaConnections and DataConnections.</span>"
      },

      {
        "name": "listAllPeers",
        "type": "METHOD",
        "snippet": "[peer listAllPeers:^(NSArray* aryPeers){ ... }];",
        "description": "Get an NSArray of PeerIDs of users connected with the same API key."
      },

      {
        "name": "identity",
        "type": "NSString",
        "description": "The brokering ID of this peer. If no ID was specified in the <a href='#skwpeer'>SKWPeer</a> class, this will be <code>undefined</code> until the<a href='#skwpeer-on-event-skw_peer_event_open'><code>open</code></a> event is emitted."
      },

      {
        "name": "connections",
        "type": "NSMutableDictionary",
        "description": "A hash of all connections associated with this peer, keyed by the remote peer's ID.<span class='tip'>We recommend keeping track of connections yourself rather than relying on this hash.</span>"
      },

      {
        "name": "isDisconnected",
        "type": "BOOL",
        "description": "<code>NO</code> if there is an active connection to the PeerServer."
      },

      {
        "name": "isDestroyed",
        "type": "BOOL",
        "description": "<code>YES</code> if this peer and all of its connections can no longer be used."
      }
    ]
  },

  {
    "name": "SKWPeerOption",
    "type": "CLASS",
    "snippet": "SKWPeerOption* options = [[SKWPeerOption alloc] init];",
    "description": "Specify connection settings.",
    "children": [
      {
        "name": "key",
        "type": "NSString",
        "description": "API key for the cloud PeerServer."
      },
      {
        "name": "domain",
        "type": "NSString",
        "description": "The domain registered with the API key on the SkyWay developer's dashboard."
      },
      {
        "name": "host",
        "optional": true,
        "type": "NSString",
        "description": "Server host. Defaults to <code>skyway.io</code>."

      },
      {
        "name": "port",
        "optional": true,
        "type": "NSInteger",
        "description": "Server port. Defaults to <code>443</code>."
      },
      {
        "name": "path",
        "optional": true,
        "type": "NSString",
        "description": "The path where your self-hosted PeerServer is running. Defaults to <code>'/'</code>."
      },
      {
        "name": "secure",
        "optional": true,
        "type": "BOOL",
        "description": "<code>YES</code> if you're using SSL. Defaults to <code>YES</code> since skyway.io uses SSL."
      },
      {
        "name": "turn",
        "optional": true,
        "type": "BOOL",
        "description": "<code>YES</code> if you're using SkyWay's TURN server. Defaults to <code>NO</code>. You must apply <a href='https://skyway.io/ds/turnrequest' target='_blank'>here</a> to use this feature."
      },
      {
        "name": "config",
        "optional": true,
        "type": "NSArray <SKWIceConfig>",
        "description": "Configuration <a href='#skwiceconfig'><code>SKWIceConfig</code></a> NSArray*.Defaults to { 'iceServers': [{ 'url': 'stun:stun.skyway.io:3478' }] }. It is not necessary to set iceServers if you're using SkyWay's TURN server."
      },
      {
        "name": "debug",
        "optional": true,
        "type": "SKWDebugLevelEnum",
        "description": "Prints log messages depending on the debug level passed in. Defaults to <code>SKW_DEBUG_LEVEL_NO_LOGS</code>.",
        "children": [
          {
            "name": "SKW_DEBUG_LEVEL_NO_LOGS",
            "description": "Prints no logs."
          },
          {
            "name": "SKW_DEBUG_LEVEL_ONLY_ERROR",
            "description": "Prints only errors."
          },
          {
            "name": "SKW_DEBUG_LEVEL_ERROR_AND_WARNING",
            "description": "Prints errors and warnings."
          },
          {
            "name": "SKW_DEBUG_LEVEL_ALL_LOGS",
            "description": "Prints all logs."
          }
        ]
      }
    ]
  },

  {
    "name": "SKWIceConfig",
    "snippet": "SKWIceConfig* config = [[SKWIceConfig alloc] init];",
    "type": "CLASS",
    "description": "Specify STUN/TURN server settings.",
    "children":[
      {
        "name": "url",
        "type": "NSString",
        "description": "The STUN/TURN server url."
      },
      {
        "name": "username",
        "optional": true,
        "type": "NSString",
        "description": "Use when a user name is required."
      },
      {
        "name": "credential",
        "optional": true,
        "type": "NSString",
        "description": "Use when a password is required."
      }
    ]
  },

  {
    "name": "SKWConnectOption",
    "type": "CLASS",
    "snippet": "SKWConnectOption* options = [[SKWConnectOption alloc] init];",
    "description": "Specify options for connecting to peers.",
    "children": [
      {
        "name": "label",
        "type": "NSString",
        "description": "A unique label by which you want to identify this data connection. If left unspecified, a label will be generated at random. Can be accessed withdataConnection.<a href='#skwdataconnection-label'><code>label</code></a>"
      },
      {
        "name": "metadata",
        "type": "NSString",
        "description": "Metadata associated with the connection, passed in by whoever initiated the connection. Can be accessed withdataConnection.<a href='#skwdataconnection-metadata'><code>metadata</code></a>."
      },
      {
        "name": "serialization",
        "type": "SKWSerializationEnum",
        "description": "The data serialization format. Default is BINARY. This value changes what type of data can be sent using dataConnection.<a href='#skwdataconnection-send'><code>send</code></a>. The value can be obtained using dataConnection.<a href='#skwdataconnection-serialization'><code>serialization</code></a>.",
        "children": [
          {
            "name": "SKW_SERIALIZATION_BINARY",
            "description": "Set serialization type:<code>binary</code>"
          },
          {
            "name": "SKW_SERIALIZATION_BINARY_UTF8",
            "description": "Set serialization type:<code>binary-utf8</code>"
          },
          {
            "name": "SKW_SERIALIZATION_JSON",
            "description": "Set serialization type:<code>json</code>"
          },
          {
            "name": "SKW_SERIALIZATION_NONE",
            "description": "Set serialization type:<code>none</code>"
          }
        ]
      },
      {
        "name": "reliable",
        "type": "BOOL",
        "description": "Whether the underlying data channels should be reliable (e.g. for large file transfers) or not (e.g. for gaming or streaming). Defaults to <code>NO</code>"
      }
    ]
  },


  {
    "name": "SKWCallOption",
    "type": "CLASS",
    "snippet": "SKWCallOption* options = [[SKWCallOption alloc] init];",
    "description": "Specify options for calling peers.",
    "children": [
      {
        "name": "metadata",
        "type": "NSString",
        "description": "Any type of metadata associated with the connection, passed in by whoever initiated the connection."
      }
    ]
  },

  {
    "name": "SKWPeerError",
    "type": "CLASS",
    "description": "Obtained when an ”error” event occurs. If the OS gives error info, it can be found in the error property.",
    "children": [
      {
        "name": "type",
        "type": "SKWPeerErrorEnum",
        "description": "Enumerated error types.",
        "children": [
          {
            "name": "SKW_PEER_ERR_NO_ERROR",
            "type": "Error",
            "tags": ["fatal"],
            "description": "No error has occurred"
          },
          {
            "name": "SKW_PEER_ERR_BROWSER_INCOMPATIBLE",
            "type": "Error",
            "tags": ["fatal"],
            "description": "The client does not support some or all WebRTC features that you are trying to use."
          },
          {
            "name": "SKW_PEER_ERR_INVALID_ID",
            "type": "Error",
            "tags": ["fatal"],
            "description": "The ID passed into the SKWPeer constructor contains illegal characters."
          },
          {
            "name": "SKW_PEER_ERR_INVALID_KEY",
            "type": "Error",
            "tags": ["fatal"],
            "description": "The API key passed into the SKWPeer constructor contains illegal characters or is not in the system (cloud server only).。"
          },
          {
            "name": "SKW_PEER_ERR_UNAVAILABLE_ID",
            "type": "Error",
            "tags": ["fatal"],
            "description": "The ID passed into the SKWPeer constructor is already taken."
          },
          {
            "name": "SKW_PEER_ERR_SSL_UNAVAILABLE",
            "type": "Error",
            "tags": ["fatal"],
            "description": "The server does not support SSL."
          },
          {
            "name": "SKW_PEER_ERR_DISCONNECTED",
            "type": "Error",
            "description": "You've already disconnected this peer and can no longer make any new connections on it."
          },
          {
            "name": "SKW_PEER_ERR_SERVER_ERROR",
            "type": "Error",
            "tags": ["fatal"],
            "description": "Unable to reach the server."
          },
          {
            "name": "SKW_PEER_ERR_SOCKET_ERROR",
            "type": "Error",
            "tags": ["fatal"],
            "description": "An error from the underlying socket."
          },
          {
            "name": "SKW_PEER_ERR_SOCKET_CLOSED",
            "type": "Error",
            "tags": ["fatal"],
            "description": "The underlying socket closed unexpectedly."
          },
          {
            "name": "SKW_PEER_ERR_NETWORK",
            "type": "Error",
            "tags": ["fatal"],
            "description": "Network error between signalling server."
          },
          {
            "name": "SKW_PEER_ERR_PEER_UNAVAILABLE",
            "type": "Error",
            "tags": ["fatal"],
            "description": "The Peer is unavailable."
          },
          {
            "name": "SKW_PEER_ERR_WEBRTC",
            "type": "Error",
            "tags": ["fatal"],
            "description": "Error about WebRTC."
          }
        ]
      },
      {
        "name": "message",
        "type": "NSString",
        "description": "error message"
      },
      {
        "name": "error",
        "type": "NSError",
        "description": "Error information object from OS."
      }
    ]
  },
  {
    "name": "SKWDataConnection",
    "type": "CLASS",
    "description": "Wraps WebRTC's DataChannel. To get one, use SKWPeer <a href='#skwpeer-connectwithid'><code>connectWithId</code></a> or listen for the <a href='#skwpeer-on-event-skw_peer_event_connection'><code>SKW_PEER_EVENT_CONNECTION</code></a> event.",
    "children": [
      {
        "name": "send",
        "type": "METHOD",
        "snippet": "BOOL bResult = [dataConnection send:data];",
        "description": "Sends data to the remote peer. The processing method changes depending on the <a href='#skwdataconnection-serialization'><code>serialization</code></a>property. Depending on the value of serialization, the data that can be sent between each of the platforms (JavaScript, iOS, and Android) changes. See <a href='https://github.com/nttcom/skyway-docs-en/blob/master/serialization.md' target='_blank'>this chart</a> for details.",
        "children": {
          "name": "data",
          "description": "The data to send."
        }
      },

      {
        "name": "close",
        "type": "METHOD",
        "snippet": "[dataConnection close];",
        "description": "Closes the data connection gracefully, cleaning up underlying DataChannels and PeerConnections."
      },

      {
        "name": "on",
        "type": "METHOD",
        "snippet": "[dataConnection on:event callback:^(NSObject* obj)callback];",
        "description": "Set event callback for SKWDataConnection events.",
        "children": [
          {
            "name": "event",
            "type": "SKWDataConnectionEventEnum",
            "description": "Data connection event types.",
            "children": [
              {
                "name": "SKW_DATACONNECTION_EVENT_DATA",
                "snippet": "[dataConnection on:SKW_DATACONNECTION_EVENT_DATA callback:^(NSObject* obj){ ... }];",
                "description": "Emitted when data is received from the remote peer."
              },
              {
                "name": "SKW_DATACONNECTION_EVENT_OPEN",
                "snippet": "[dataConnection on:SKW_DATACONNECTION_EVENT_OPEN callback:^(NSObject* obj){ ... }];",
                "description": "Emitted when the connection is established and ready-to-use."
              },
              {
                "name": "SKW_DATACONNECTION_EVENT_CLOSE",
                "snippet": "[dataConnection on:SKW_DATACONNECTION_EVENT_CLOSE callback:^(NSObject* obj){ ... }];",
                "description": "Emitted when either you or the remote peer closes the data connection."
              },
              {
                "name": "SKW_DATACONNECTION_EVENT_ERROR",
                "snippet": "[dataConnection on:SKW_DATACONNECTION_EVENT_ERROR callback:^(NSObject* obj){ ... }];",
                "description": "The callback function parameter is a<a href='#skwpeererror'>SKWPeerError</a> parameter."
              }
            ]
          },
          {
            "name": "callback",
            "description": "Specifies the Block to call when the event is triggered."
          }
        ]
      },
      {
        "name": "bufferSize",
        "type": "NSUInteger",
        "description": "The number of messages queued to be sent once the browser buffer is no longer full."
      },
      {
        "name": "dataChannel",
        "type": "<a href='#skwdatachannel'>SKWDataChannel</a>",
        "description": "A reference to the SKWDataChannel object associated with the connection."
      },
      {
        "name": "label",
        "type": "NSString",
        "description": "A unique label by which you want to identify this data connection. If left unspecified, a label will be generated at random."
      },
      {
        "name": "metadata",
        "type": "NSString",
        "description": "Any type of metadata associated with the connection, passed in by whoever initiated the connection."
      },
      {
        "name": "isOpen",
        "type": "BOOL",
        "description": "Is <code>YES</code> if the connection is open and ready for reading and writing."
      },
      {
        "name": "peerConnection",
        "type": "RTCPeerConnection",
        "description": "The RTCPeerConnection object tied to the connection."
      },
      {
        "name": "peer",
        "type": "NSString",
        "description": "The ID of the peer on the other end of this connection."
      },
      {
        "name": "reliable",
        "type": "BOOL",
        "description": "Whether the underlying data channels should be reliable. Is set when the connection is opened."
      },
      {
        "name": "serialization",
        "type": "SKWSerializationEnum",
        "description": "The serialization format to use when sending data. Is set when the connection is opened.",
        "children": [
          {
            "name": "SKW_SERIALIZATION_BINARY",
            "description": "<code>binary</code>"
          },
          {
            "name": "SKW_SERIALIZATION_BINARY_UTF8",
            "description": "<code>binary-utf8</code>"
          },
          {
            "name": "SKW_SERIALIZATION_JSON",
            "description": "<code>json</code>"
          },
          {
            "name": "SKW_SERIALIZATION_NONE",
            "description": "<code>none</code>"
          }
        ]
      },
      {
        "name": "type",
        "type": "NSString",
        "description": "For data connections, this is always <code>'data'</code>."
      }
    ]
  },
  {
    "name": "SKWMediaConnection",
    "type": "CLASS",
    "description": "Wraps WebRTC's media streams. Obtained from Peer.<a href='#skwpeer-callwithid'><code>callWithId</code></a> or the <a href='#skwpeer-on-event-skw_peer_event_call'><code>SKW_PEER_EVENT_CALL</code></a> event.",
    "children": [
      {
        "name": "answer",
        "type": "METHOD",
        "snippet": "[mediaConnection answer];<br>[mediaConnection answer:stream];",
        "description": "Answer media connections obtained from a <a href='#skwpeer-on-event-skw_peer_event_call'><code>call</code></a> event. You can set your own media stream as the parameter.",
        "children": {
          "name": "stream",
          "optional": true,
          "type": "<a href='#skwmediastream'>SKWMediaStream</a>",
          "description": "<a href='#skwmediastream'><code>SKWMediaStream</code></a> obtained from SKWNavigator.getUserMedia."
        }
      },
      {
        "name": "close",
        "type": "METHOD",
        "snippet": "[media close];",
        "description": "Closes the media connection."
      },
      {
        "name": "on",
        "type": "METHOD",
        "snippet": "[mediaConnection on:event callback:^(NSObject* obj)callback];",
        "description": "Set listeners for SKWMediaConnectionEnum event.",
        "children": [
          {
            "name": "event",
            "type": "SKWMediaConnectionEnum",
            "description": "MediaConnection event types.",
            "children": [
              {
                "name": "SKW_MEDIACONNECTION_EVENT_STREAM",
                "snippet": "[mediaConnection on:SKW_MEDIACONNECTION_EVENT_STREAM callback:^(NSObject* stream){ ... }];",
                "description": "Emitted when a remote peer adds a <code>stream</code>."
              },
              {
                "name": "SKW_MEDIACONNECTION_EVENT_CLOSE",
                "snippet": "[mediaConnection on:SKW_MEDIACONNECTION_EVENT_CLOSE callback:^(NSObject* obj){ ... }];",
                "description": "Emitted when either you or the remote peer closes the media connection."
              },
              {
                "name": "SKW_MEDIACONNECTION_EVENT_ERROR",
                "snippet": "[mediaConnection on:SKW_MEDIACONNECTION_EVENT_ERROR callback:^(NSObject* obj){ ... }];",
                "description": "The class of callback arguments is<a href='#skwpeererror'>SKWPeerError</a>."
              }
            ]
          },
          {
            "name": "callback",
            "description": "Specifies the Block to call when the event is triggered."
          }
        ]
      },
      {
        "name": "isOpen",
        "type": "BOOL",
        "description": "Whether the media connection is active (e.g. your call has been answered). You can check this if you want to set a maximum wait time for a one-sided call."
      },
      {
        "name": "metadata",
        "type": "NSString",
        "description": "Any type of metadata associated with the connection, passed in by whoever initiated the connection."
      },
      {
        "name": "peer",
        "type": "NSString",
        "description": "The ID of the peer on the other end of this connection."
      },
      {
        "name": "type",
        "type": "NSString",
        "description": "For media connections, this is always <code>'media'</code>."
      }
    ]
  },

  {
    "name": "SKWMediaStream",
    "type": "CLASS",
    "children": [
      {
        "name": "close",
        "type": "METHOD",
        "snippet": "[stream close];",
        "description": "close MedisStream."
      },
      {
        "name": "getVideoTracks",
        "type": "METHOD",
        "snippet": "NSUInteger videos = [stream getVideoTracks];",
        "description": "Gets the number of VideoTracks added to the MediaStream."
      },
      {
        "name": "setEnableVideoTrack",
        "type": "METHOD",
        "snippet": "[stream setEnableVideoTrack:pos enable:enable];",
        "description": "Sets the play state of VideoTracks in a MediaStream.",
        "children": [
          {
            "name": "pos",
            "type": "NSUInteger",
            "description": "The index of the VideoTrack. VideoTrack indexes are 0 or greater."
          },
          {
            "name": "enable",
            "type": "BOOL",
            "description": "Play if <code>YES</code>, stop if <code>NO</code>."
          }
        ]
      },
      {
        "name": "getEnableVideoTrack",
        "type": "METHOD",
        "snippet": "BOOL enable = [stream getEnableVideoTrack:pos];",
        "description": "Gets the play state of the VideoTrack.",
        "children": [
          {
            "name": "pos",
            "type": "NSUInteger",
            "description": "The index of the VideoTrack. VideoTrack indexes are 0 or greater."
          }
        ]
      },
      {
        "name": "getAudioTracks",
        "type": "METHOD",
        "snippet": "NSUInteger audios = [stream getAudioTracks];",
        "description": "The number of Audio tracks added to media stream."
      },
      {
        "name": "setEnableAudioTrack",
        "type": "METHOD",
        "snippet": "[stream setEnableAudioTrack:pos enable:enable];",
        "description": "Set the play state of audio track added to media stream.",
        "children": [
          {
            "name": "pos",
            "type": "NSUInteger",
            "description": "The index of the AudioTrack. AudioTrack indexes are 0 or greater."
          },
          {
            "name": "enable",
            "type": "BOOL",
            "description": "Play if <code>YES</code>, stop if <code>NO</code>."
          }
        ]
      },
      {
        "name": "getEnableAudioTrack",
        "type": "METHOD",
        "snippet": "BOOL enable = [stream getEnableAudioTrack:pos];",
        "description": "Get audio track play state.",
        "children": [
          {
            "name": "pos",
            "type": "NSUInteger",
            "description": "The index of the AudioTrack. AudioTrack indexes are 0 or greater."
          }
        ]
      },
      {
        "name": "setCameraPosition",
        "type": "METHOD",
        "snippet": "BOOL result = [stream setCameraPosition:pos];",
        "description": "In case of using iOS device's local media stream, set used camera",
        "children": [
          {
            "name": "pos",
            "type": "SKWCameraPositionEnum",
            "description": "Set used camera position.",
            "children":[
              {
                "name": "SKW_CAMERA_POSITION_UNSPECIFIED",
                "description": "Use camera found first. The order depends on the system."
              },
              {
                "name": "SKW_CAMERA_POSITION_BACK",
                "description": "Use back camera."
              },
              {
                "name": "SKW_CAMERA_POSITION_FRONT",
                "description": "Use front camera."
              }
            ]
          }
        ]
      },
      {
        "name": "getCameraPosition",
        "type": "METHOD",
        "snippet": "SKWCameraPositionEnum pos = [stream getCameraPosition];",
        "description": "In case of using iOS device's local media stream, get used camera",
        "children": [
          {
            "name": "pos",
            "type": "SKWCameraPositionEnum",
            "description": "Get used camera position.",
            "children":[
              {
                "name": "SKW_CAMERA_POSITION_UNSPECIFIED",
                "description": "Camera position is unspecified."
              },
              {
                "name": "SKW_CAMERA_POSITION_BACK",
                "description": "Camera position is back."
              },
              {
                "name": "SKW_CAMERA_POSITION_FRONT",
                "description": "Camera position is front."
              }
            ]
          }
        ]
      },
      {
        "name": "switchCamera",
        "type": "METHOD",
        "snippet": "Bool result = [stream switchCamera];",
        "description": "Change camera if possible while using iOS device's local media stream. Returns <code>true</code> if it successfully changes camera, <code>false</code> otherwise."
      }
    ]
  },
  {
    "name": "SKWVideo",
    "type": "OBJECT",
    "snippet": "SKWVideo* video = [[SKWVideo alloc] initWithFrame:(CGRect)rect];",
    "description": "The object to display the video.",
    "children": [
      {
        "name": "addSrc",
        "type": "METHOD",
        "snippet": "[video addSrc:stream track:trackNo];",
        "description": "Add mediastream and Track No, as a media source to the SKWVideo object.",
        "children": [
          {
            "name": "stream",
            "type": "<a href='#skwmediastream'>SKWMediaStream</a>",
            "description": "mediastream to add."
          },
          {
            "name": "trackNo",
            "type": "NSUInteger",
            "description": "The index of the VideoTrack. VideoTrack indexes are 0 or greater."
          }
        ]
      },
      {
        "name": "removeSrc",
        "type": "METHOD",
        "snippet": "[video removeSrc:stream track:trackNo];",
        "description": "Remove mediastream and Track No, as a media source from the SKWVideo object.",
        "children": [
          {
            "name": "stream",
            "type": "<a href='#skwmediastream'>SKWMediaStream</a>",
            "description": "mediastream to remove."
          },
          {
            "name": "trackNo",
            "type": "NSUInteger",
            "description": "The index of the VideoTrack. VideoTrack indexes are 0 or greater."
          }
        ]
      },
      {
        "name": "setDidChangeVideoSizeCallback",
        "type": "METHOD",
        "snippet": "[video setDidChangeVideoSizeCallback:^(CGSize size)callback",
        "description": "Callback called when video size changes.",
        "children": [
          {
            "name": "callback",
            "description": "Specifies the Block to call when the event is triggered."
          }
        ]
      }
    ]
  },
  {
    "name": "SKWNavigator",
    "type": "CLASS",
    "description": "Class to get Video.",
    "children": [
      {
        "name": "initialize",
        "type": "METHOD",
        "snippet": "[SKWNavigator initialize:peer];",
        "description": "Initialize Navigator",
        "children": [
          {
            "name": "peer",
            "type": "<a href='#skwpeer'>SKWPeer</a>",
            "description": "Initialized SKWPeer object"
          }
        ]
      },
      {
        "name": "terminate",
        "type": "METHOD",
        "snippet": "[SKWNavigator terminate];",
        "description": "Terminate navigator"
      },
      {
        "name": "getUserMedia",
        "type": "METHOD",
        "snippet": "SKWMediaStream* stream = [SKWNavigator getUserMedia:constraints];",
        "description": "Get Local Media Stream.",
        "children": [
          {
            "name": "constraints",
            "type": "<a href='#skwmediaconstraints'>SKWMediaConstraints</a>",
            "description": "Media Stream setting"
          }
        ]
      }
    ]
  },
  {
    "name": "SKWMediaConstraints",
    "type": "CLASS",
    "description": "Options for the <a href='#skwnavigator'>SKWNavigator</a>.getUserMedia.",
    "children": [
      {
        "name": "videoFlag",
        "type": "BOOL",
        "description": "Set the video. <code>YES</code> enable the video, <code>NO</code> disable the video. Defaults to <code>YES</code>."
      },
      {
        "name": "audioFlag",
        "type": "BOOL",
        "description": "Sets the audio. <code>YES</code> enable the audio, <code>NO</code> disable the audio. Defaults to <code>YES</code>."
      },
      {
        "name": "cameraPosition",
        "type": "SKWCameraPositionEnum",
        "description": "Set camera. Defaults to SKW_CAMERA_POSITION_FRONT.",
        "children": [
          {
            "name": "SKW_CAMERA_POSITION_UNSPECIFIED",
            "description": "Use camera found first. The order depends on the system."
          },
          {
            "name": "SKW_CAMERA_POSITION_BACK",
            "description": "Use back camera. If it's not found, use camera found first."
          },
          {
            "name": "SKW_CAMERA_POSITION_FRONT",
            "description": "Use front camera. If it's not found, use camera found first."
          }
        ]
      },
      {
        "name": "maxWidth",
        "type": "NSUInteger",
        "description": "Set the width pixel maximum limit. Defaults to <code>640</code>.<br>Valid values for maxWidth, minWidth, maxHeight, minHeight are shown below. In case of setting invalid value or combination, values will be set to defaults.<span class='tip'>max (Width x Height): 640x480, 800x600, 960x540, 1280x720<br>min (Width x Height): 192x144, 352x288, 512x384, 640x480</span>"
      },
      {
        "name": "minWidth",
        "type": "NSUInteger",
        "description": "Set the width pixel minimum limit. Defaults to <code>192</code>."
      },
      {
        "name": "maxHeight",
        "type": "NSUInteger",
        "description": "Set the height pixel maximum limit. Defaults to <code>480</code>."
      },
      {
        "name": "minHeight",
        "type": "NSUInteger",
        "description": "Set the height pixel minimum limit. Defaults to <code>144</code>."
      },
      {
        "name": "maxFrameRate",
        "type": "NSUInteger",
        "description": "Set the frame rate maximum limit. Defaults to <code>10</code>."
      },
      {
        "name": "minFrameRate",
        "type": "NSUInteger",
        "description": "Set the frame rate minimum limit. Defaults to <code>2</code>."
      }
    ]
  }
]
